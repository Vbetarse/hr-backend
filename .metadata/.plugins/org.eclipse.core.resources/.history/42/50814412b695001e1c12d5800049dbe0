package com.hr.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hr.dao.DepartmentsRepository;
import com.hr.dto.DepartmentsPojo;
import com.hr.entity.CountriesEntity;
import com.hr.entity.DepartmentsEntity;
import com.hr.entity.LocationsEntity;
import com.hr.entity.RegionsEntity;

@Service
public class DepartmentsServiceImpl implements DepartmentService {
	@Autowired
	DepartmentsRepository departmentsRepository;

	@Override
	public String addnewDepartment(DepartmentsPojo departmentsPojo) {
		
		DepartmentsEntity departmentsEntity = new DepartmentsEntity();
		BeanUtils.copyProperties(departmentsPojo, departmentsEntity);
		{
			LocationsEntity locationsEntity = new LocationsEntity();
			BeanUtils.copyProperties(departmentsPojo.getLocationsPojo(), locationsEntity);
			departmentsEntity.setLocationsEntity(locationsEntity);
		}
		departmentsRepository.save(departmentsEntity);
		return "Record Created Successfully";
	}

	@Override
	public String updatedepartmentEntity(DepartmentsPojo departmentsPojo) {
		DepartmentsEntity departmentsEntity = new DepartmentsEntity();
		BeanUtils.copyProperties(departmentsPojo, departmentsEntity);
		{
			LocationsEntity locationsEntity = new LocationsEntity();
			BeanUtils.copyProperties(departmentsPojo.getLocationsPojo(), locationsEntity);
			departmentsEntity.setLocationsEntity(locationsEntity);
		}
		departmentsRepository.save(departmentsEntity);
		return "Record Created Successfully";
	}

	@Override
	public String deletedepartmentById(int departmentId) {
		Optional<DepartmentsEntity>departmentsEntity=departmentsRepository.findById(departmentId);
		DepartmentsPojo departmentsPojo = new DepartmentsPojo();
		BeanUtils.copyProperties(departmentsEntity.get(), departmentsPojo);
		if(departmentsPojo!=null)
			departmentsRepository.deleteById(departmentId);
		return "Record deleted succssfully";
	}

	@Override
	public List<DepartmentsPojo> getallDepartmentsWithEmployees() {
		List<DepartmentsEntity> allDepartmentsEntity = departmentsRepository.findAll();
		for(DepartmentsEntity d: allDepartmentsEntity)
			System.out.println(d);
		List<DepartmentsPojo> departmentPojoList=new ArrayList<DepartmentsPojo>();
		for(DepartmentsEntity eachDepartmentsEntity:allDepartmentsEntity ) {
			DepartmentsPojo eachDepartmentPojo = new DepartmentsPojo();
			BeanUtils.copyProperties(eachDepartmentsEntity, eachDepartmentPojo);
			departmentPojoList.add(eachDepartmentPojo);
		}
		return departmentPojoList;
		
	}

}
